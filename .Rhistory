ggplot(aes(DateTime, Items)) +
geom_point(aes(color=DateTime), alpha=1/3) +
theme(
axis.text.y=element_text(angle=10),
panel.background = element_rect(fill = 'red'),
panel.border = element_rect(linetype = "dashed", fill = NA)) +
labs(title = "Item sales", subtitle = 'on date', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
ggplot(aes(DateTime, Items)) +
geom_point(aes(color=DateTime), alpha=1/3) +
theme(
axis.text.y=element_text(angle=10),
panel.border = element_rect(linetype = "dashed", fill = NA)) +
labs(title = "Item sales", subtitle = 'on date', caption='Based on data from "The Bread Basket" \n 2016-2017')
?element_rect
df_bakery %>%
ggplot(aes(DateTime, Items)) +
geom_point(aes(color=DateTime), alpha=1/3) +
theme(
axis.text.y=element_text(angle=10),
panel.border = element_rect(linetype = 1, fill = NA)) +
labs(title = "Item sales", subtitle = 'on date', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
ggplot(aes(DateTime, Items)) +
geom_point(aes(color=DateTime), alpha=1/3) +
theme(
axis.text.y=element_text(angle=10),
panel.border = element_rect(linetype = 2, fill = NA)) +
labs(title = "Item sales", subtitle = 'on date', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
ggplot(aes(DateTime, Items)) +
geom_point(aes(color=DateTime), alpha=1/3) +
theme(
axis.text.y=element_text(angle=10),
panel.border = element_rect(linetype = 3, fill = NA)) +
labs(title = "Item sales", subtitle = 'on date', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
ggplot(aes(DateTime, Items)) +
geom_point(aes(color=DateTime), alpha=1/3) +
theme(
axis.text.y=element_text(angle=10),
panel.border = element_rect(linetype = 1, fill = NA)) +
labs(title = "Item sales", subtitle = 'on date', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
ggplot(aes(DateTime, Items)) +
geom_point(aes(color=DateTime), alpha=1/3) +
theme(
axis.text.y=element_text(angle=10),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Item sales", subtitle = 'on date', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
ggplot(aes(DateTime, Items)) +
geom_point(aes(color=DateTime), alpha=1/3) +
theme(
axis.text.y=element_text(angle=10),
panel.border = element_rect(linetype = 1, fill = NA)) +
labs(title = "Item sales", subtitle = 'on date', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=10),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=10),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=10),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=15),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=25),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(aes(color=Items), show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'lightblue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
asdsad
asdasd
asdsad
asdasd
# header
2
## some
2
# some
2
# some
2
df_bakery_wday %>%
filter(hour > 1) %>%
ggplot(aes(hour, fill=Daypart), position='dodge') +
geom_histogram(binwidth = 1, color='white') +
facet_wrap(vars(wday)) +
theme_minimal() +
scale_y_sqrt() +
labs(
title='Bakery Sales',
subtitle = 'per week day in hours',
x='hour',
y='',
caption='Based on data from "The Bread Basket" \n 2016-2017')
# a new tibble with 2 new variables, wday (week day) and hour
df_bakery_wday <- df_bakery %>%
arrange(DateTime) %>%
mutate(wday = wday(DateTime, label = TRUE, week_start=1, abbr=FALSE, locale='en_GB'),
hour = hour(DateTime))
# display tibble
df_bakery_wday
# display the max and min tuples of hour to get a view for filtering
max_hour <- max(df_bakery_wday$hour)
min_hour <- min(df_bakery_wday$hour)
rbind(
df_bakery_wday[which.max(df_bakery_wday$hour),],
df_bakery_wday[which.min(df_bakery_wday$hour),]
)
# as the company switched to online shopping, people make also orders in the evening
df_bakery_wday %>%
filter(between(hour, 20, max_hour)) %>%
arrange(desc(hour))
# here we see a strange online order at 1:21 am, because I dont have much info on opening hours and delivery I can not say much but it is somehow funny to order a bread at 1:21 am
df_bakery_wday %>%
filter(between(hour, min_hour, 10)) %>%
arrange(hour)
# info:
# geom = bars/ rectangle
# mapping = x maps hour, y maps count of occurrences, fill in Daypart (level)
# position = dodge, bin width = 1 (equal to 1 hour) and border color = white
# facet = wday (week day)
# theme = minimal
# scale = continuous, scale_y_sqrt (Straightening)
# explanation:
# geom: I chose for histogram so I can distribute the count of occurrences in bins of 1 hour
# with having Daypart as a fill color (categorical: color hue, 'Tamara Munzer') in dodge position (T1, less log error in 'Tamara Munzer') ('Michael Friendly' distinction of color, day parts) which gives the possibility to group the hours and day parts together for a better perceiving and quick understanding of the data (decode)
# border color: I chose for white so the observer can get a better feeling of the distribution
# over the hours and it makes the visualization less harsh
# facet: I found the subplots in week day necessary so the eye of the observer can travel much
# smoother. So the observer can get more detail of a certain day.
# theme: I found the minimal fashion a good taste (High Data/ Ink, 'Tufte wisdom'), it takes away the noise
# y label: I chose to not use it because the heights of the bars already give a certain understanding of the sales
# scale: here I used straightening for y-axis (Tukey) so we can have better view of some day parts, e.g. Night and Evening
df_bakery_wday %>%
filter(hour > 1) %>%
ggplot(aes(hour, fill=Daypart), position='dodge') +
geom_histogram(binwidth = 1, color='white') +
facet_wrap(vars(wday)) +
theme_minimal() +
scale_y_sqrt() +
labs(
title='Bakery Sales',
subtitle = 'per week day in hours',
x='hour',
y='',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart)) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart)) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart)) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart)) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
```{r simple plot to get a idea of the data, echo=FALSE, warning=FALSE, error=FALSE}
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart)) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
```{r simple plot to get a idea of the data, echo=FALSE, warning=FALSE, error=FALSE, include=FALSE}
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart)) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart)) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart)) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart)) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart), bins=30) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart), bins=30) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart), bins=30) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
axis.ticks.length.y = unit(.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
axis.ticks.length.y = unit(1.25, "cm"),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
?geom_point
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
df_bakery <- read_csv('data/Bakery.csv')
names(df_bakery)
str(df_bakery)
head(df_bakery)
tail(df_bakery)
# check N by Date, amount sales per date
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
count(Date)
# check if any column has any missing value
amount_nas <- df_bakery %>%
select_if(function(x) any(is.na(x)))
str_c('There are: ', length(amount_nas), ' missing values')
df_bakery %>%
mutate(Date=as.Date(DateTime)) %>%
ggplot(aes(Date)) +
geom_freqpoly(aes(color=Daypart), bins=30) +
theme_minimal() +
scale_y_log10() +
labs(
title='Sales over time',
subtitle = 'levels in day part',
y='sales log10',
caption='Based on data from "The Bread Basket" \n 2016-2017')
# a new tibble with 2 new variables, wday (week day) and hour
df_bakery_wday <- df_bakery %>%
arrange(DateTime) %>%
mutate(wday = wday(DateTime, label = TRUE, week_start=1, abbr=FALSE, locale='en_GB'),
hour = hour(DateTime))
# display tibble
df_bakery_wday
# display the max and min tuples of hour to get a view for filtering
max_hour <- max(df_bakery_wday$hour)
min_hour <- min(df_bakery_wday$hour)
rbind(
df_bakery_wday[which.max(df_bakery_wday$hour),],
df_bakery_wday[which.min(df_bakery_wday$hour),]
)
# as the company switched to online shopping, people make also orders in the evening
df_bakery_wday %>%
filter(between(hour, 20, max_hour)) %>%
arrange(desc(hour))
# here we see a strange online order at 1:21 am, because I dont have much info on opening hours and delivery I can not say much but it is somehow funny to order a bread at 1:21 am
# I have chosen not to visualize 1 record (online order at 1:21:05 am), which is reported as the 1st row in the tibble below. The reason is to have a more fine visualized plot and because this concerns 1 record, it is fine to have it reported.
df_bakery_wday %>%
filter(between(hour, min_hour, 10)) %>%
arrange(hour)
df_bakery <- read_csv('data/Bakery.csv')
names(df_bakery)
str(df_bakery)
# here we see a strange online order at 1:21 am, because I dont have much info on opening hours and delivery I can not say much but it is somehow funny to order a bread at 1:21 am
# I have chosen not to visualize 1 record (online order at 1:21:05 am), which is reported as the 1st row in the tibble below. The reason is to have a more fine visualized plot and because this concerns 1 record, it is fine to have it reported.
df_bakery_wday %>%
filter(between(hour, min_hour, 10)) %>%
arrange(hour)
df_bakery_wday %>%
filter(hour > 1) %>%
ggplot(aes(hour, fill=Daypart), position='dodge') +
geom_histogram(binwidth = 1, color='white') +
facet_wrap(vars(wday)) +
theme_minimal() +
scale_y_sqrt() +
labs(
title='Bakery Sales',
subtitle = 'per week day in hours',
x='hour',
y='',
caption='Based on data from "The Bread Basket" \n 2016-2017')
df_bakery %>%
count(Items) %>%
ggplot(aes(n, Items)) +
geom_point(color='red', show.legend = FALSE) +
theme(
axis.text.y=element_text(angle=20),
panel.background = element_rect(fill = 'blue'),
panel.grid.major = element_line(colour = "black"),
panel.border = element_rect(linetype = 0, fill = NA)) +
labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')
