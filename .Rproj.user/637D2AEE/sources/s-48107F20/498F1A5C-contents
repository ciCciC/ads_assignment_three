---
title: "assignment 3: data visualization"
author: "Koray Poyraz"
date: "10/5/2021"
output: rmarkdown::github_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


loading libraries
```{r libraries, warning=FALSE}
library(tidyverse)
library(lubridate)
```

## Applying Peng's checklist

load Bakery data as csv
```{r load data, warning=FALSE}
df_bakery <- read_csv('data/Bakery.csv')
```

view variable names
```{r view variable names}
names(df_bakery)
```

check packaging
```{r check packaging, warning=FALSE}
str(df_bakery)
```

top and bottom
```{r top and bottom}
head(df_bakery)
tail(df_bakery)
```

check your n's
```{r check your n}
# These N checks are done to get a understanding of the attributes count

# check N by Items
df_bakery %>% count(Items)
# check N by Daypart, amount sales per Daypart
df_bakery %>% count(Daypart)
# check N by DayType, amount sales per DayType
df_bakery %>% count(DayType)
# check N by Date, amount sales per date
df_bakery %>% 
  mutate(Date=as.Date(DateTime)) %>% 
  count(Date)

```

check missing values
```{r check missing values}
# check if any column has any missing value
amount_nas <- df_bakery %>% 
  select_if(function(x) any(is.na(x)))

str_c('There are: ', length(amount_nas), ' missing values')
```

simple plot to get a idea of the data
```{r simple plot to get a idea of the data, warning=FALSE}

df_bakery %>% 
  mutate(Date=as.Date(DateTime)) %>% 
  ggplot(aes(Date)) +
  geom_freqpoly(aes(color=Daypart), bins=30) +
  theme_minimal() +
  scale_y_log10() +
  labs(
    title='Sales over time', 
    subtitle = 'levels in day part', 
    y='sales log10', 
    caption='Based on data from "The Bread Basket" \n 2016-2017')

```


preperation for good visualization
```{r preperation for good visualization}

# The idea here is to get a insight in the sales during weekdays and hours over time

# a new tibble with 2 new variables, wday (week day) and hour
df_bakery_wday <- df_bakery %>% 
  arrange(DateTime) %>% 
  mutate(wday = wday(DateTime, label = TRUE, week_start=1, abbr=FALSE, locale='en_GB'), 
         hour = hour(DateTime))

# display tibble
df_bakery_wday

```

analyzing the max and min in hour
```{r analyzing the max and min in hour}

# display the max and min tuples of hour to get a view for filtering
max_hour <- max(df_bakery_wday$hour)
min_hour <- min(df_bakery_wday$hour)

rbind(
  df_bakery_wday[which.max(df_bakery_wday$hour),], 
  df_bakery_wday[which.min(df_bakery_wday$hour),]
  )

# as the company switched to online shopping, people make also orders in the evening
df_bakery_wday %>% 
  filter(between(hour, 20, max_hour)) %>% 
  arrange(desc(hour))

# here we see a strange online order at 1:21 am, because I dont have much info on opening hours and delivery I can not say much but it is somehow funny to order a bread at 1:21 am
# I have chosen not to visualize 1 record (online order at 1:21:05 am), which is reported as the 1st row in the tibble below. The reason is to have a more fine visualized plot and because this concerns 1 record, it is fine to have it reported.
df_bakery_wday %>% 
  filter(between(hour, min_hour, 10)) %>% 
  arrange(hour)

```
## Good visualization
### info:
+ geom = bars/ rectangle
+ mapping = x maps hour, y maps count of occurrences, fill in Daypart (level)
+ position = dodge, bin width = 1 (equal to 1 hour) and border color = white
+ facet = wday (week day)
+ theme = minimal
+ scale = continuous, scale_y_sqrt (Straightening)

### explanation:
+ geom: I chose for histogram so I can distribute the count of occurrences in bins of 1 hour
with having Daypart as a fill color (categorical: color hue, 'Tamara Munzer') in dodge position (T1, less log error in 'Tamara Munzer') ('Michael Friendly' distinction of color, day parts) which gives the possibility to group the hours and day parts together for a better perceiving and quick understanding of the data (decode)
+ border color: I chose for white so the observer can get a better feeling of the distribution
over the hours and it makes the visualization less harsh
+ facet: I found the subplots in week day necessary so the eye of the observer can travel much
smoother. So the observer can get more detail of a certain day.
+ theme: I found the minimal fashion a good taste (High Data/ Ink, 'Tufte wisdom'), it takes away the noise
+ y label: I chose to not use it because the heights of the bars already give a certain understanding of the sales
+ scale: here I used straightening for y-axis (Tukey) so we can have better view of some day parts, e.g. Night and Evening


```{r good visualization}

# Question: what are the hours of the week days that deliver high sales?

df_bakery_wday %>% 
  filter(hour > 1) %>% 
  ggplot(aes(hour, fill=Daypart), position='dodge') +
  geom_histogram(binwidth = 1, color='white') +
  facet_wrap(vars(wday)) +
  theme_minimal() +
  scale_y_sqrt() +
  labs(
    title='Bakery Sales', 
    subtitle = 'per week day in hours',
    x='hour', 
    y='', 
    caption='Based on data from "The Bread Basket" \n 2016-2017')

```


## Bad visualization

### info:
+ geom = points, dots
+ mapping = x maps counts, y maps Items
+ stat = identity
+ color = static 'red'
+ theme = manual inputs

### explanation:
+ geom: The visualization doesn't has the correct geometrical object for categorical vs continues variables which makes perceiving the information (decode) hard.
+ color: doesn't fit the rule of Tamara Munzer because an ordered variable is using color hue which are meant for categorical variables. And makes relating a point
to a item difficult.
+ overplotting: hard to read the labels and the points, mostly overlapping
+ Doesn't fit Tufte's principles because it has Low Data/ Ink ratio which makes perceiving data difficult, also the colors are harsh

```{r bad visualization}

# Question: how many items were sold between 2016 and 2017?

df_bakery %>% 
  count(Items) %>% 
  ggplot(aes(n, Items)) +
  geom_point(color='red', show.legend = FALSE) +
  theme(
    axis.text.y=element_text(angle=20),
    panel.background = element_rect(fill = 'blue'), 
    panel.grid.major = element_line(colour = "black"),
    panel.border = element_rect(linetype = 0, fill = NA)) +
  labs(title = "Sales per item", subtitle = 'number of items sold between 2016-2017', caption='Based on data from "The Bread Basket" \n 2016-2017')

```

